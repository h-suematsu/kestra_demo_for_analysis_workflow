id: analysis
namespace: git.demo
description: |-
  # Analysis Workflow
  KVストアに保存されたイベントから解析処理を行う Workflow

  複数の解析タイプの結果を集約して処理を行い、最終的な分析結果を出力します。
  このワークフローは同じjob_idに対する複数の解析結果を必要とします。

  ## 実行方法

  ### 実行方法1: Webhook (トリガーキー経由)
  ```
  curl -v -X POST -H 'Content-Type: application/json' \
  -d '{"job_id": "aaaaaa"}' \
  'http://localhost:8080/api/v1/executions/webhook/git.demo/analysis/analysis_webhook'
  ```

  ### 実行方法2: ネームスペース経由
  ```
  curl -v -X POST -H 'Content-Type: multipart/form-data' \
  -F 'message={"job_id": "aaaaaa"}' \
  'http://localhost:8080/api/v1/main/executions/git.demo/analysis'
  ```

  ### 注意点
  このワークフローを実行する前に、同じjob_idでtype_aとtype_bの両方のデータがKVストアに登録されている必要があります。

triggers:
  - id: webhook_trigger
    type: io.kestra.plugin.core.trigger.Webhook
    key: analysis_webhook

inputs:
  - id: required_analysis_types
    type: ARRAY
    itemType: STRING
    defaults:
      - type_a
      - type_b
    description: 処理を開始するのに必要とする解析結果
    required: true

tasks:
  - id: validate_job_id
    type: io.kestra.plugin.core.flow.If
    condition: "{{ trigger.body.job_id is not defined }}"
    then:
      - id: job_id_invalid
        type: io.kestra.plugin.core.execution.Fail
        errorMessage: "メッセージにjob_idが含まれていません"

  - id: get_analysis_results
    type: io.kestra.plugin.core.flow.ForEach
    values: "{{ inputs.required_analysis_types }}"
    tasks:
      - id: get_kv
        type: io.kestra.plugin.core.kv.Get
        key: "{{ trigger.body.job_id }}.{{ taskrun.value }}"
        errorOnMissing: true
        retry:
          type: exponential
          interval: PT10S
          maxInterval: PT10M
          maxDuration: PT12H

  - id: process_data
    type: io.kestra.plugin.scripts.python.Script
    inputFiles:
      input.json: "{{outputs.get_kv}}"
    beforeCommands:
      - pip install kestra
    script: |
      import json
      from kestra import Kestra

      with open('input.json', 'r') as f:
          input_data = json.load(f)

      # 処理例（実際の業務ロジックに置き換えてください）
      results = {
          key: value["value"]["data"]
          for key, value in input_data.items()
      }
      Kestra.outputs({ "results": results })

  - id: outputs_results
    type: io.kestra.plugin.core.log.Log
    message: "分析結果: {{ outputs.process_data.vars.results }}"

concurrency:
  limit: 10
